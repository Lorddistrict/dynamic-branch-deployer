---
on:
  push:
  pull_request:
    types:
      - opened
      - reopened
      - edited
      - synchronize
jobs:
  usage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: rlespinasse/github-slug-action@v4
      - name: Output
        run: |
          echo "Partial variables"
          echo "   repository owner    : ${{ env.GITHUB_REPOSITORY_OWNER_PART }}"
          echo "   repository name     : ${{ env.GITHUB_REPOSITORY_NAME_PART }}"
          echo "Slug variables"
          echo "   repository          : ${{ env.GITHUB_REPOSITORY_SLUG }}"
          echo "   repository owner    : ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}"
          echo "   repository name     : ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}"
          echo "   ref                 : ${{ env.GITHUB_REF_SLUG }}"
          echo "   head ref            : ${{ env.GITHUB_HEAD_REF_SLUG }}"
          echo "   base ref            : ${{ env.GITHUB_BASE_REF_SLUG }}"
          echo "   event ref           : ${{ env.GITHUB_EVENT_REF_SLUG }}"
          echo "Slug URL variables"
          echo "   repository          : ${{ env.GITHUB_REPOSITORY_SLUG_URL }}"
          echo "   repository owner    : ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG_URL }}"
          echo "   repository name     : ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG_URL }}"
          echo "   ref                 : ${{ env.GITHUB_REF_SLUG_URL }}"
          echo "   head ref            : ${{ env.GITHUB_HEAD_REF_SLUG_URL }}"
          echo "   base ref            : ${{ env.GITHUB_BASE_REF_SLUG_URL }}"
          echo "   event ref           : ${{ env.GITHUB_EVENT_REF_SLUG_URL }}"
          echo "Short SHA variables"
          echo "   sha                 : ${{ env.GITHUB_SHA_SHORT }}"
          echo "   pull request sha    : ${{ env.GITHUB_EVENT_PULL_REQUEST_HEAD_SHA_SHORT }}"
#  build:
#    name: Build & Push image
#    runs-on: ubuntu-latest
#    steps:
#      - name: Get branch name
#        id: branch-name
#        uses: tj-actions/branch-names@v5.2
#      - uses: actions/checkout@v2
#      - name: Build and Publish API
#        uses: elgohr/Publish-Docker-Github-Action@master
#        with:
#          name: Lorddistrict/dynamic-branch-deployer/crontab-api:${{ steps.branch-name.outputs.current_branch }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#          registry: ghcr.io
#  deploy:
#    name: Login to Github Repository & Deploy
#    runs-on: ubuntu-latest
#    needs: [ build ]
#    steps:
#      - name: Login to GitHub Container Registry
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - uses: rlespinasse/github-slug-action@v4
#      - name: Get branch name
#        id: branch-name
#        uses: tj-actions/branch-names@v5.2
#      - name: Deploy
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SSH_SERVER }}
#          username: ${{ secrets.SSH_USER }}
#          key: ${{ secrets.SSH_KEY }}
#          script: |
#            cd /home/github_actions/dynamic-branch-deployer
#            docker compose pull || true
#            docker compose build
#            docker compose -p ${{ steps.branch-name.outputs.current_branch }} up -d
#            docker compose exec backend composer install
#            docker_service_name="backend"
#            config_file_name=${{ steps.branch-name.outputs.current_branch }}.conf
#            cat config/docker/backend/branch_template.conf > /etc/nginx/sites-available/$(config_file_name)
#            ln -s /etc/nginx/sites-available/$(config_file_name) /etc/nginx/sites-enabled/$(config_file_name)
#            sed -i "s/docker_service_port/$(docker port ${{ steps.branch-name.outputs.current_branch }}-$(docker_service_name)-1 | awk -F':' '{print $2}' | tr -d '\n')/g" /etc/nginx/sites-available/$(config_file_name)
